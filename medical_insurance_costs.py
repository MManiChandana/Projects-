# -*- coding: utf-8 -*-
"""medical-insurance-costs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1seluXhG0JuQX-_-Qnf-tgof20ri1sPt2
"""

import warnings
warnings.filterwarnings("ignore")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning, module="my_module")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('insurance.csv')
print(df.head())
print('No of rows and colums:',df.shape,'\n')
print(df.info(),'\n')
print('Unique Values\n',df.nunique(),'\n')
print('Null Values\n',df.isnull().sum(),'\n')

#@title EDA
sns.distplot(df.charges)

#@title EDA
charges = df['charges'].groupby(df.region).sum().sort_values()
f, ax = plt.subplots(1, 1, figsize=(8,4))
ax = sns.barplot(x=charges.values, y=charges.index, palette='Blues')
# ax = sns.barplot(x=df.charges, y=df.region, palette='Blues')

#@title EDA
f, ax = plt.subplots(1, 1, figsize=(10,8))
ax = sns.barplot(x='region', y='charges', hue='sex', data= df, palette='cool')

#@title EDA
f, ax = plt.subplots(1, 1, figsize=(10,8))
ax = sns.barplot(x='region', y='charges', hue='smoker', data= df, palette='Reds_r')

#@title EDA
sns.catplot(x='smoker', kind='count', hue='sex', data= df, palette='Reds_r')

#@title EDA
f, ax = plt.subplots(1, 1, figsize=(12,8))
ax = sns.barplot(x='region', y='charges', hue='children', data= df, palette='pastel')

#@title EDA
sns.scatterplot(x='age', y='charges',hue='smoker',data=df)

#@title EDA
sns.scatterplot(x='bmi', y='charges',hue='smoker',data=df,palette='Set1')

#@title Lable Enoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(df.sex.drop_duplicates())
df.sex = le.transform(df.sex)

le.fit(df.smoker.drop_duplicates())
df.smoker = le.transform(df.smoker)

le.fit(df.region.drop_duplicates())
df.region = le.transform(df.region)
print(df.head(),'\n')
print(df.info())

#@title Corelation
df.corr()
dataplot = sns.heatmap(df.corr(), cmap = 'YlGnBu', annot=True)

#@title Allocation of values
# X = df.drop(['charges'], axis=1)
# y = df['charges']
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

#@title Model Fitting
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X = sc_X.fit_transform(X)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 0)
from sklearn.linear_model import LinearRegression
lin_regressor = LinearRegression()
lin_regressor.fit(X_train, y_train)
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X_train)
poly_reg = LinearRegression()
poly_reg.fit(X_poly, y_train)
from sklearn.tree import DecisionTreeRegressor
tree_regressor = DecisionTreeRegressor(random_state = 0)
tree_regressor.fit(X_train, y_train)
from sklearn.ensemble import RandomForestRegressor
forest_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)
forest_regressor.fit(X_train, y_train)

#@title reshaping and model fitting
y_reshaped = y_train.reshape(len(y_train),1)
sc_y = StandardScaler()
y_new = sc_y.fit_transform(y_reshaped)
from sklearn.svm import SVR
svm_regressor = SVR(kernel = 'rbf')
svm_regressor.fit(X_train, y_new)

y_pred_lin = lin_regressor.predict(X_test)
y_pred_poly = poly_reg.predict(poly.fit_transform(X_test))
y_pred_tree = tree_regressor.predict(X_test)
y_pred_forest = forest_regressor.predict(X_test)
# y_pred_svm = svm_regressor.predict(X_test)
y_pred_svm = sc_y.inverse_transform(svm_regressor.predict(X_test).reshape(-1,1))

from sklearn.metrics import r2_score
print("Linear:",r2_score(y_test, y_pred_lin))
print("Poly:",r2_score(y_test, y_pred_poly))
print("Tree:",r2_score(y_test, y_pred_tree))
print("Forest:",r2_score(y_test, y_pred_forest))
print("SVM:",r2_score(y_test, y_pred_svm))

